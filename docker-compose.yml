services:
  # Backend service
  backend:
    build: .  # What to build (the current directory with the Dockerfile)
    ports:
      - "8000:8000" # Connect port 8000 on host to port 8000 in container
    volumes:
      - .:/app  # Sync current directory to /app in container
    environment:
      - DATABASE_URL=postgresql://user:password@db/plants_db
      - SECRET_KEY=${SECRET_KEY} # Read SECRET_KEY from environment variables
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - PLANTS_TOPIC=watering_schedule
    depends_on:
      - db # Wait for the database service to be ready
      - kafka # Wait for the Kafka service to be ready

  # Frontend service
  frontend:
    build:
      context: ./frontend # What to build (the frontend directory)
    ports:
      - "5173:80" # Connect port 5173 on host to port 80 in container (Nginx)

  # Database service
  db:
    image: postgres:15 # Use the official Postgres image, version 15
    volumes:
      - postgres_data:/var/lib/postgresql/data/ # Save DB data even if container is removed
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=plants_db

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_INTERNAL://localhost:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      
volumes:
  postgres_data: # Official setup of the volume to save DB data